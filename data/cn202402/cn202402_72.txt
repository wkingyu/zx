大模型知识管理系统 周 扬   等 热点专题
中兴通讯技术
2024  年 4 月    第 30 卷第  2 期   Apr . 2024    Vol . 30  No. 2骤。每一个步骤往往都需要专门微调一个小语言模型 ，而且
对于不同的知识图谱 ，往往需要重新进行微调训练 ，时间成
本较高 。在大模型时代 ，利用大模型出色的语义理解能力和
prompt 提示词工程 ，我们仅需要一个大模型就可以较好地对
多个知识图谱进行知识检索 。
基于大模型的知识图谱检索有两种方式 ：Text2Cypher
和GraphRAG 。其中 ，Text2Cypher 将用户问题翻译成图数据
库能够识别的 Cypher 语句 ，然后调用图数据库接口执行这
个生成的 Cypher 语句以获得执行结果 ，并将执行结果通过
LLM 能力生成最终答案 。GraphRAG 通过构造子图 （Sub‐
Graph ）方式来利用知识图谱中的上下文知识以处理用户查
询。它首先从用户输入的查询内容中提取实体 ，然后通过构
建与查询相关实体的子图来建立上下文 ，最后将子图信息作
为上下文和用户查询一起送给大模型以给出准确的回答 。知
识图谱检索工作流程如图 6所示 。
2.2.2.2 数据库检索
Text2SQL，也称为 NL2SQL，是指将自然语言 （NL）查
询转换为关系型数据库中可执行的 SQL查询语言的过程 。用
户能够以自然语言形式提出查询请求 ，无须编写 SQL 语句 ，
从而降低了与数据库交互的复杂性 。与知识图谱检索类似 ，
传统的 Text2SQL 方法也存在流程复杂 、组件冗余的情况 。
同时 ，采用传统的 Text2SQL 方法 ，准确性也难以得到保障 。
通过引入大模型 ，我们可以加速整个 Text2SQL 的流程 ，并
将准确率由原先的 60%提升到 80%[12]。
Text2SQL 进行数据库数据检索主要包括以下步骤 ：首
先利用 Schema 过滤器筛选与用户输入相关的 Schema ，然后
将筛选的 Schema 列表与问题一并交给大模型 ，利用大模型
生成 SQL语句并执行 ，最终借助大模型对 SQL的执行结果进
行分析和总结 。2.2.2.3 插件 API检索
插件 API检索是指通过 API调用外部服务或功能的过
程，这被视为 LLM 与外部世界交互的一种方式 。这种交互
经常涉及函数调用 （Function Calling ） 。更具体地 ，它涉及通
过API发送请求和接收响应 。这些 API可能由第三方服务 、
工具集或自定义实现提供 ，比如 ：OpenAI 的联网检索和代
码解释器就是常见的两种插件检索应用形态 。在传统的插件
API检索中 ，面对繁杂的插件 API，系统往往难以准确调用
正确的插件 API。在大模型时代 ，大模型能够较好地通过
API描述 ，并结合查询 ，从而较为准确地调用相关 API进行
检索 。
插件 API检索的流程首先需要使用 API过滤器将用户通
过自然语言输入的用户查询进行筛选过滤 ，从中取出 TopK
候选相关的 API，并将这些 API定义和用户查询一起送给大
模型进行处理 。对于支持 Function Call 功能的 LLM ，它会返
回函数调用的名称和参数等信息 。
2.2.3 后处理
后处理 （Postprocessing ）阶段负责对检索结果进行进一
步的优化和调整 ，以提高检索系统性能和检索结果质量 。这
一阶段的核心活动包括但不限于对检索结果进行筛选 、压缩
和重新排序等操作 。进行这些操作的目的是为了精炼并整理
出一组最终结果 。这些结果随后将被提交给 LLM 以生成响
应答案 。在本节中 ，我们将对上下文压缩 、重排技术进行
介绍 。
2.2.3.1 上下文压缩
通过 RAG 获得的上下文长度常常达到数千个 tokens 。当
检索步骤所获得的结果内容较多并超出大模型上下文长度
时，需要对上下文进行压缩处理以去除冗余信息 ，查询无关
图6 知识图谱检索KG：知识图谱         LLM ：大语言模型（a） Text 2Cypher（b）GraphRAG查询
回答LLM
查询转 Cypher 语句
综合分析知识
图谱查询
回答知识
图谱实体识别 实体扩展
综合分析LLM
查询 KG
子图
68