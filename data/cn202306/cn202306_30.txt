基于多时隙业务联合整形的低能耗资源调度方法 李建东  等 热点专题
中兴通讯技术
2023  年 12 月    第 29 卷第  6 期   Dec . 2023    Vol . 29  No. 6功率Pin(t)、输出功率方差 Pvn(t)；用户的节点特征变量包
括：传输速率 Cm(t)、当前时隙用户剩余需要传输的数据
Drm(t)、当前时隙用户的总数据业务完成比例 CRn(t)；基站
与用户之间的信道增益和接入矩阵分别为 GNM(t)和XNM(t)。
N表示基站集合 ，N=(1,2,…,N)，N表示基站的总数 ；M
代表用户集合 ，M=(1,2,…,M)，M表示基站的总数 。
基站与用户进行通信时 ，会进行相应的匹配 ，并发射无
线电信号 。这些信号经过一定的路径损耗到达用户[10]。由香
农公式 ，我们可以得到每个用户 m在时隙 t的服务速率 ，具
体如公式 （2） ：
Cm(t)=B⋅log2(1+SINRnm(t))。 （2）
信噪比 （SINR ）是指信号干扰噪声比 ，即有用信号比
其 他 信 号 的 干 扰 加 噪 声 。那 么 ，SINR 在 正 交 多 址 接 入
（OMA ）系统下的计算公式为 ：
SINRnm(t)=Pon()t⋅Gnm()t
∑i∈{}N/nPoi()t⋅Gim()t+σ2
。 （3）
根据上述基础公式 ，我们建立了低能耗资源调度优化
模型 ：
max
{}X，P∑
t∑
mCRm()t
∑
n( ) Pin()t+Pvn()t
s.t.ì
í
îï
ïïïïï
ï
ïïïïï
ïïxnm()t∈{}0，1 ∀n∈N，∀m∈M，∀t∈T
∑
mxnm()t≤LKn∀n∈N，∀t∈T
∑
mPnm()t≤POn∀n∈N，∀t∈T
0≤CRm()t≤1∀m∈M，∀t∈T 。 （4）
为实现优化目标 ，我们将业务完成率 CRm(t)进行最大
化，基站输入能量 Pin(t)和输出功率波动 Pvn(t)进行最小化 。
约束条件为 ：每一时隙每个用户最多连接一个基站 ；每个基
站最多可接入用户数不超过其最大子载波数 ；每个基站分配
给所有其接入用户的功率不超过该基站的最大功率阈值 ；每
个用户的服务质量范围规定在 0～1之间 。
2.2 模型求解算法设计
随着人工智能 （AI）技术的发展 ，深度学习[11]和强化学
习[12]被逐渐应用于资源调度领域 。根据上述建立的系统模
型，我 们 设 计 了 多 时 隙 业 务 联 合 整 形 的 深 度 强 化 学 习
（MSRS-HDDPG ）算法 ，并在核心架构中采用了深度确定性
策略梯度 （DDPG ）算法[13]。具体的强化学习三元组设计如下 ：
1）状态空间 st：具体包括用户业务量 Dm(t)、用户未完
成传输的数据量 Drm(t)、每个用户的数据完成率 Crm(t)、信
道信息Gnm(t)、基站输入功率 Pin(t)、基站输出功率方差
Pvn(t)。
2）动 作 空 间 at：具 体 包 括 用 户 和 基 站 的 连 接 关 系
Xnm(t)、基站的发射功率 Pon(t)。
3）奖励函数 rt：rt=∑
mCRm()t
∑
n( ) Pin()t+Pvn()t 
。
具体的网络架构设计如下 ：
1）动作网络输入状态信息 st，输出需要优化的动作 at。
2）评价网络输入 (st,at)，输出当前状态下选择该动作的
价值Qt。
3）目标动作网络输入 st+1，输出at+1，即下一时刻的动
作估计 ；目标评价网络输入 (st+1,at+1)，输出下一时刻的动
作价值Qt+1。
多时隙业务联合整形的模块具体设计如下 ：
1）假设时隙为 t，用户m的数据业务请求量为 Dm(t)；
2）根据历史数据估计每个基站 n的负载情况 ；
3）若基站工作在非线性区域 ，那么将功率的最大值约
束设为线性区域的最大发射功率 ，并计算用户在时隙 t的未
完成业务量 Drm(t)，D'm(t+1)=Drm(t)+Dm(t+1)；
4）若基站工作在线性区域 ，则根据强化学习算法直接
完成当前时隙的全部业务请求 ；
5）重复上述步骤 3） 、4）至时隙T。
算法的具体执行流程如算法 1。
算法 1 多时隙业务联合整形的深度强化学习算法
初始化评价网络 、动作网络和对应目标网络的参数
初始化缓存空间 ，存放探索的状态转移向量作为神经网络训
练样本
  for for episode=1，2，…，EPISODES do do
  初始化探索状态 s0
  感知和预测一段时间内信道信息
  for for t=1，2，…，T dodo
根据多时隙的请求和信道估计进行业务联合整形
随机输出探索动作 at并将输出功率映射到输入功率
根据整形后的业务需求设计当前时隙的奖励函数 rt
执行后观测当前时隙的奖励和下一时刻的状态 st+1
    将状态转移 （st， at， rt， st+1）存入缓存空间
26